
<<<<Nasta Kommentar>>>>>

Tanken med Matrix 채r att det ska fungera ungef채r som immutable Array2. 

<<<<Nasta Kommentar>>>>>
 
Raderna i och kolonnerna j r채knas upp fr책n 0.

<<<<Nasta Kommentar>>>>>
 getElement (m, i, j)
	TYPE: 'a matrix * int * int -> 'a
	PRE: 0 <= i < columns of m and 0 <= j < rows of m
	POST: the element in matrix m on the i:th row and the j:th column
	EXAMPLE: getElement(setElement(createMatrix(3,3,0), 0, 2, 3), 0, 2) = 3
	
<<<<Nasta Kommentar>>>>>
 setElement (m, i, j, v)
	TYPE: 'a matrix * int * int * 'a -> 'a matrix
	PRE: 0 <= i < columns of m and 0 <= j < rows of m
	POST: replaces the element in matrix m on the i:th row and the j:th column with v
	EXAMPLE: setElement(createMatrix(3,3,0), 0, 2, 3) = 
[0  0  3]
[0  0  0]
[0  0  0]
	
<<<<Nasta Kommentar>>>>>
 nCols m
	TYPE: 'a matrix -> int
	PRE: none
	POST: number of columns in matrix m
	EXAMPLE: nCols(Vector.fromList[Vector.fromList[0,0,1],Vector.fromList[0,0,0]]) = 3
	
<<<<Nasta Kommentar>>>>>
 nRows m
	TYPE: 'a matrix -> int
	PRE: none
	POST: number of rows in matrix m
	EXAMPLE: nRows(createMatrix (1,2,3)) = 1
	
<<<<Nasta Kommentar>>>>>
 createMatrix (i, j, init)
	TYPE: int * int * 'a -> 'a matrix
	PRE: 0 < i, j
	POST: matrix that have i rows and j columns with init as all elements
	EXAMPLE: createMatrix (2, 3, 0) = 
[0   0   0]
[0   0   0]
	
<<<<Nasta Kommentar>>>>>
 getRow (m, i)
	TYPE: 'a matrix * int -> 'a vector
	PRE: 0 <= i < columns of m
	POST: row i in matrix m
	EXAMPLE: getRow(createMatrix (2, 3, 0) , 1) = Vector.fromList[0, 0, 0]
	
<<<<Nasta Kommentar>>>>>
 setRow (m, i, v)
	TYPE: 'a matrix * int * 'a vector -> 'a matrix
	PRE:  0 <= i < columns of m
	POST: row i in matrix m replaced by element v
	EXAMPLE: setRow(createMatrix (2, 3, 0), 1, Vector.fromList[1,1,1]) =
[0  0  0]
[1  1  1]
	